close all; clear; clc

aircraftDataFileName = 'DSV_Aircraft_data.txt';
myAircraft = DSVAircraft(aircraftDataFileName);

V0 = 240;
h0 = 9000;
gamma0_deg = 0;

delta_s_deg = -1;

design0 = [0; 0.5; 0; 0];
lowerBounds = [convang(-15, 'deg', 'rad'); ...
               0.0; ...
               convang(-24, 'deg', 'rad'); ...
               convang(-3, 'deg', 'rad')];
upperBounds = [convang(18, 'deg', 'rad'); ...
               1.0; ...
               convang(16, 'deg', 'rad'); ...
               convang(3, 'deg', 'rad')];

[design, cost] = ThreeDoFTrim(myAircraft, ...
                              V0, h0, ...
                              delta_s_deg, gamma0_deg, ...
                              design0, lowerBounds, upperBounds);

alpha0 = design(1);
alpha0_deg = convang(alpha0, 'rad', 'deg');

delta_T0 = design(2);

delta_e0 = design(3);
delta_e0_deg = convang(delta_e0, 'rad', 'deg');

delta_s0 = design(4);
delta_s0_deg = convang(delta_s0, 'rad', 'deg');

trimTable = table({" "; ...
                   strcat("V = ", num2str(V0), " m/s"); ...
                   round(alpha0_deg, 3, 'Significant'); ...
                   round(delta_T0, 3, 'Significant'); ...
                   round(delta_e0_deg, 3, 'Significant'); ...
                   round(delta_s0_deg, 3, 'Significant'); ...
                   round(cost, 3, 'Significant')}, ...
                  'RowNames', ...
                  ["Trimmed leveled symmetrical flight", ...
                   strcat("h = ", num2str(h0), " m"), ...
                   "Absolute AoA (deg)", "Throttle", ...
                   "Elevator deflection (deg)", ...
                   "Stabilator deflection (deg)", "Cost value"]);
writetable(trimTable, 'excabrapicchiatrimTable.txt', 'Delimiter', ',', ...
           'WriteVariableNames', false, 'WriteRowNames', true);

t_end = 45;
delta_e_deg_impulse = [15, 15, 7.5];
half_duration = [1.5, 4, 1.5];

state0 = [V0; alpha0; 0; 0; -h0; alpha0];

time_cell = cell(3, 1);
delta_T_cell = time_cell;
delta_e_deg_cell = time_cell;
delta_s_deg_cell = time_cell;
V_cell = time_cell;
alpha_cell = time_cell;
q_cell = time_cell;
x_EG_cell = time_cell;
z_EG_cell = time_cell;
elevation_cell = time_cell;
Nt_cell = time_cell;
for is = 1 : 3
delta_T_law = @(t) interp1([0, 1] * t_end, ...
                           [1, 1] * delta_T0, ...
                           t, 'linear');

delta_e_deg_law = @(t) interp1(...
                     [0, 1, ...
                      1+half_duration(is), 1+2*half_duration(is), ...
                      t_end], ...
                     [delta_e0_deg, delta_e0_deg, ...
                      delta_e0_deg-delta_e_deg_impulse(is), ...
                      delta_e0_deg, delta_e0_deg], ...
                     t, 'pchip');

delta_s_deg_law = @(t) interp1([0, 1] * t_end, ...
                               [1, 1] * delta_s0_deg, ...
                               t, 'linear');

[time, ...
 delta_T, delta_e_deg, delta_s_deg, ...
 V, alpha, q, x_EG, z_EG, elevation] = ...
             ThreeDoFVabLin(t_end, state0, myAircraft, ...
                            delta_T_law, delta_e_deg_law, delta_s_deg_law);

time_cell{is} = time;
Nt_cell{is} = length(time);
delta_T_cell{is} = delta_T;
delta_e_deg_cell{is} = delta_e_deg;
delta_s_deg_cell{is} = delta_s_deg;
V_cell{is} = V;
alpha_cell{is} = alpha;
q_cell{is} = q;
x_EG_cell{is} = x_EG;
z_EG_cell{is} = z_EG;
elevation_cell{is} = elevation;
end

Nt = min([Nt_cell{1}, Nt_cell{2}, Nt_cell{3}]);
time = linspace(0, t_end, Nt).';

interpFunc = @(data1, data2) interp1(data1, data2, time, 'pchip');

delta_T = [interpFunc(time_cell{1}, delta_T_cell{1}), ...
           interpFunc(time_cell{2}, delta_T_cell{2}), ...
           interpFunc(time_cell{3}, delta_T_cell{3})];

delta_e_deg = [interpFunc(time_cell{1}, delta_e_deg_cell{1}), ...
               interpFunc(time_cell{2}, delta_e_deg_cell{2}), ...
               interpFunc(time_cell{3}, delta_e_deg_cell{3})];

delta_s_deg = [interpFunc(time_cell{1}, delta_s_deg_cell{1}), ...
               interpFunc(time_cell{2}, delta_s_deg_cell{2}), ...
               interpFunc(time_cell{3}, delta_s_deg_cell{3})];

V = [interpFunc(time_cell{1}, V_cell{1}), ...
     interpFunc(time_cell{2}, V_cell{2}), ...
     interpFunc(time_cell{3}, V_cell{3})];

alpha = [interpFunc(time_cell{1}, alpha_cell{1}), ...
         interpFunc(time_cell{2}, alpha_cell{2}), ...
         interpFunc(time_cell{3}, alpha_cell{3})];
alpha_deg = convang(alpha, 'rad', 'deg');

q = [interpFunc(time_cell{1}, q_cell{1}), ...
     interpFunc(time_cell{2}, q_cell{2}), ...
     interpFunc(time_cell{3}, q_cell{3})];
q_degps = convangvel(q, 'rad/s', 'deg/s');

x_EG = [interpFunc(time_cell{1}, x_EG_cell{1}), ...
        interpFunc(time_cell{2}, x_EG_cell{2}), ...
        interpFunc(time_cell{3}, x_EG_cell{3})];

z_EG = [interpFunc(time_cell{1}, z_EG_cell{1}), ...
        interpFunc(time_cell{2}, z_EG_cell{2}), ...
        interpFunc(time_cell{3}, z_EG_cell{3})];

elevation = [interpFunc(time_cell{1}, elevation_cell{1}), ...
             interpFunc(time_cell{2}, elevation_cell{2}), ...
             interpFunc(time_cell{3}, elevation_cell{3})];
elevation_deg = convang(elevation, 'rad', 'deg');

lgnd = {sprintf("$\\Delta\\delta_\\mathrm{e} = %s$ deg, $\\Delta t/2 = %s$ s", ...
                num2str(delta_e_deg_impulse(1)), ...
                num2str(half_duration(1))), ...
        sprintf("$\\Delta\\delta_\\mathrm{e} = %s$ deg, $\\Delta t/2 = %s$ s", ...
                num2str(delta_e_deg_impulse(2)), ...
                num2str(half_duration(2))), ...
        sprintf("$\\Delta\\delta_\\mathrm{e} = %s$ deg, $\\Delta t/2 = %s$ s", ...
                num2str(delta_e_deg_impulse(3)), ...
                num2str(half_duration(3)))};

stackedPlot2(time, delta_T, delta_e_deg, ...
             {"Simulation time (s)", ...
              "$\delta_\mathrm{T}$", "$\delta_\mathrm{e}$ (deg)"}, ...
             {}, lgnd, 'excabrapicchiainputcommands.pdf')

stackedPlot2(time, V, alpha_deg, ...
             {"Simulation time (s)", "Airspeed (m/s)", "$\alpha$ (deg)"}, ...
             {}, lgnd, 'excabrapicchiaVa.pdf')

stackedPlot2(time, elevation_deg, q_degps, ...
             {"Simulation time (s)", "$\theta$ (deg)", "$q$ (deg/s)"}, ...
             {}, lgnd, 'excabriapicchiathetaq.pdf')

stackedPlot2(time, x_EG, -z_EG, ...
             {"Simulation time (s)", ...
              "$x_{\mathrm{E},G}$ (m)", "Altitude (m)"}, ...
             {}, lgnd, 'excabrapicchiacogxh.pdf')

y_EG = zeros(Nt, 1);
phi = y_EG;
psi = y_EG;
for is = 1 : 3
    trajectoryView(time, x_EG(:, is), y_EG, z_EG(:, is), ...
                   phi, elevation(:, is), psi, ...
                   650, 6, ...
                   sprintf('excabrapicchiatrajectory%s.pdf', num2str(is)))
end