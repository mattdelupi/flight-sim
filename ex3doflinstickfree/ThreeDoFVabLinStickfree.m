function [time, delta_T, delta_s_deg, delta_tab_deg, ...
          V, alpha, q, x_EG, z_EG, theta, delta_e_dot, delta_e, ...
          CH_e, HingeMom] = ...
              ThreeDoFVabLinStickfree(t_end, state0, myAircraft, ...
                                      delta_T_law, ...
                                      delta_s_deg_law, delta_tab_deg_law)

delta_s_law = @(t) convang(delta_s_deg_law(t), 'deg', 'rad');
delta_tab_law = @(t) convang(delta_tab_deg_law(t), 'deg', 'rad');

g = 9.81;
W = myAircraft.mass * g;
S = myAircraft.S;
c = myAircraft.mac;
b = myAircraft.b;
mu_x = myAircraft.mu_x;
mu_T = myAircraft.mu_T;
k = myAircraft.K;
m = myAircraft.m;
k_y = myAircraft.k_y;
CL_alpha = myAircraft.CL_alpha;
CL_delta_e = myAircraft.CL_delta_e;
CL_delta_s = myAircraft.CL_delta_s;
CL_alpha_dot = myAircraft.CL_alpha_dot;
CL_q = myAircraft.CL_q;
CD0 = myAircraft.CD_0;
Cm0 = myAircraft.Cm_0;
Cm_alpha = myAircraft.Cm_alpha;
Cm_delta_e = myAircraft.Cm_delta_e;
Cm_delta_s = myAircraft.Cm_delta_s;
Cm_alpha_dot = myAircraft.Cm_alpha_dot;
Cm_delta_e_dot = myAircraft.Cm_delta_e_dot;
Cm_q = myAircraft.Cm_q;
Cm_T_0 = myAircraft.Cm_T_0;
Cm_T_alpha = myAircraft.Cm_T_alpha;
S_e = myAircraft.S_e;
Lambda_e = myAircraft.Lambda_e;
e_e = myAircraft.ec_adim;
x_C_e = myAircraft.x_C_e;
mac_e = myAircraft.mac_e;
mass_e = myAircraft.mass_e;
k_e = myAircraft.k_e;
CH_e_0 = myAircraft.Ch_e_0;
CH_e_alpha = myAircraft.Ch_e_alpha;
CH_e_delta_e = myAircraft.Ch_e_delta_e;
CH_e_delta_s = myAircraft.Ch_e_delta_s;
CH_e_delta_tab = myAircraft.Ch_e_delta_tab;
CH_e_delta_e_dot = myAircraft.Ch_e_delta_e_dot;
CH_e_alpha_dot = myAircraft.Ch_e_alpha_dot;
CH_e_q = myAircraft.Ch_e_q;
eps0 = myAircraft.eps_0;
Deps_Dalpha = myAircraft.DepsDalpha;

airspeed = @(state) state(1);
AoA = @(state) state(2);
AoA_deg = @(state) convang(state(2), 'rad', 'deg');
pitchrate = @(state) state(3);
pitchrate_degps = @(state) convang(state(3), 'rad/s', 'deg/s');
altitude = @(state) -state(5);
elevation = @(state) state(6);
elevation_deg = @(state) convang(state(6), 'rad', 'deg');
elevator = @(state) state(8);
elevator_dot = @(state) state(7);

Cm_T = @(t, state) delta_T_law(t) * (Cm_T_0 + Cm_T_alpha * AoA(state));

function a = sound(h)
    [~, a, ~, ~] = atmosisa(h);
end
a = @(state) sound(altitude(state));
mach = @(state) airspeed(state) / a(state);

function rho = density(h)
    [~, ~, ~, rho] = atmosisa(h);
end
rho = @(state) density(altitude(state));
mu = @(state) W / S / (rho(state) * b * g);

M32 = @(state) ...
   -c/b / (4 * mu(state)) * airspeed(state)*c/k_y^2 * Cm_alpha_dot;
M38 = @(state) ...
   -c/b / (4 * mu(state)) * airspeed(state)*c/k_y^2 * Cm_delta_e_dot;
M71 = @(state) ...
    e_e / k_e^2 * sin(AoA(state) - mu_x);
M72 = @(state) ...
    e_e / k_e^2 * airspeed(state) * cos(AoA(state) - mu_x) ...
   -rho(state) * airspeed(state) * S_e * mac_e^2 / (4 * mass_e * k_e^2) ...
                    * (1 - Deps_Dalpha) * CH_e_alpha_dot;
M73 = @(state) ...
   -(e_e * x_C_e / k_e^2 - cos(Lambda_e));
M76 = @(state) ...
   -e_e / k_e^2 * airspeed(state) * cos(AoA(state) - mu_x);
M78 = @(state) ...
   -rho(state) * airspeed(state) * S_e * mac_e^2 / (4 * mass_e * k_e^2) ...
                    * CH_e_delta_e_dot;
massmatrix = @(state) ...
[    1,          0,          0,      0, 0,     0,      0,     0; ...
     0,          1,          0,      0, 0,     0,      0,     0; ...
     0,      M32(state),     1,      0, 0,     0,      0, M38(state); ...
     0,          0,          0,      1, 0,     0,      0,     0; ...
     0,          0,          0,      0, 1,     0,      0,     0; ...
     0,          0,          0,      0, 0,     1,      0,     0; ...
 M71(state), M72(state), M73(state), 0, 0, M76(state), 1, M78(state); ...
     0,          0,          0,      0, 0,     0,      0,     1     ];

Thrust = @(t, state) ...
    delta_T_law(t) * ThrustModel(altitude(state), mach(state));

f1 = @(t, state) ...
    -0.5 * S/W * rho(state) * airspeed(state)^2 * g * ( ...
        CD0 + k * (CL_alpha*AoA(state) + CL_delta_e*elevator(state) + ...
                                       CL_delta_s*delta_s_law(t))^m) ...
    +Thrust(t, state)/W * g * cos(AoA(state) - mu_x - mu_T) ...
    +g * sin(AoA(state) - mu_x - elevation(state));

f2 = @(t, state) ...
    1 / (1 + c/b / (4 * mu(state)) * CL_alpha_dot) * ( ...
    -0.5 * S/W * rho(state) * airspeed(state) * g * ( ...
    CL_alpha*AoA(state) + ...
                CL_delta_e*elevator(state) + CL_delta_s*delta_s_law(t)) ...
    +pitchrate(state) * (1 - c/b / (4 * mu(state)) * CL_q) ...
    -Thrust(t, state)/W * g/airspeed(state) * ...
                                        sin(AoA(state) - mu_x - mu_T) ...
    +g/airspeed(state) * cos(AoA(state) - mu_x - elevation(state)));

f3 = @(t, state) ...
    airspeed(state)^2 * k_y^2 * c/b / (2 * mu(state)) * (...
    Cm_T(t, state) + Cm0 + Cm_alpha * AoA(state) + ...
    Cm_delta_e * elevator(state) + Cm_delta_s*delta_s_law(t) + ...
    Cm_q * pitchrate(state) * c / (2 * airspeed(state)));

f4 = @(t, state) ...
    airspeed(state) * cos(AoA(state) - mu_x - elevation(state));

f5 = @(t, state) ...
    airspeed(state) * sin(AoA(state) - mu_x - elevation(state));

f6 = @(t, state) ...
    pitchrate(state);

f7 = @(t, state) ...
    e_e/k_e^2 * g * cos(elevation(state)) + ...
    rho(state)*airspeed(state)^2*S_e*mac_e / (2 * mass_e * k_e^2) * ( ...
    CH_e_0 + CH_e_alpha * ((1 - Deps_Dalpha) * (AoA(state) - mu_x) ...
    -eps0 + delta_s_law(t) + mu_x) + Cm_delta_e * elevator(state) + ...
    CH_e_delta_s * delta_s_law(t) + CH_e_delta_tab * delta_tab_law(t) + ...
    CH_e_q * pitchrate(state) * mac_e / (2 * airspeed(state)));

f8 = @(t, state) ...
    state(7);

rhs = @(t, state) ...
    [f1(t, state); ...
     f2(t, state); ...
     f3(t, state); ...
     f4(t, state); ...
     f5(t, state); ...
     f6(t, state); ...
     f7(t, state); ...
     f8(t, state)];

dstate_dt = @(t, state) ...
    massmatrix(state) \ rhs(t, state);

ODEoptions = odeset('AbsTol', 1e-9, 'RelTol', 1e-9);

[time, state] = ode45(dstate_dt, [0, t_end], state0, ODEoptions);

delta_T = delta_T_law(time);             delta_T = delta_T(:);
delta_s_deg = delta_s_deg_law(time);     delta_s_deg = delta_s_deg(:);
delta_tab_deg = delta_tab_deg_law(time); delta_tab_deg = delta_tab_deg(:);
V = state(:, 1);
alpha = state(:, 2);
q = state(:, 3);
x_EG = state(:, 4);
z_EG = state(:, 5);
theta = state(:, 6);
delta_e_dot = state(:, 7);
delta_e = state(:, 8);

delta_s = convang(delta_s_deg, 'deg', 'rad');
delta_tab = convang(delta_tab_deg, 'deg', 'rad');
alpha_H = ( 1 - Deps_Dalpha) * (alpha - mu_x) - eps0 + delta_s + mu_x;
[~, ~, ~, dens] = atmosisa(-z_EG);

CH_e = CH_e_0 + CH_e_alpha * alpha_H + CH_e_delta_e * delta_e + ...
    CH_e_delta_s * delta_s + CH_e_delta_tab * delta_tab + ...
    mac_e./(2*V) .* ( ...
    CH_e_alpha_dot * (1 - Deps_Dalpha) * timeDerivative(time, alpha) + ...
    CH_e_q * q + CH_e_delta_e_dot * delta_e_dot);

HingeMom = CH_e .* 0.5 .* dens .* V.^2 .* S_e .* mac_e;

end