function [time, ...
          delta_T, delta_e_deg, delta_s_deg, ...
          V, alpha, q, x_EG, z_EG, theta] = ...
                          ThreeDoFQuatVab(t_end, state0, ...
                                          myAircraft, ...
                                          delta_T_law, ...
                                          delta_e_deg_law, delta_s_deg_law)

S = myAircraft.S;
c = myAircraft.c;
m = myAircraft.m;
W = myAircraft.W;
I_B = myAircraft.I_B;

function rho = density(h)
    [~, ~, ~, rho] = atmosisa(h);
end
rho = @(state) density(-state(5));

airspeed = @(state) state(1);
alpha_deg = @(state) convang(state(2), 'rad', 'deg');
elevation = @(state) state(6);
q_degps = @(state) convangvel(state(3), 'rad/s', 'deg/s');
altitude = @(state) -state(5);

InputCommands = @(t) [delta_T_law(t), ...
                      delta_e_deg_law(t), delta_s_deg_law(t), ...
                      0, 0];

ModelsInputs = @(t, state) [alpha_deg(state), 0, ...
                            InputCommands(t), ...
                            0, q_degps(state), 0, ...
                            altitude(state), airspeed(state)];

ThrustModel = @(t, state) myAircraft.ThrustModel(ModelsInputs(t, state));
DragCoeffModel = @(t, state) myAircraft.DragCoeffModel(ModelsInputs(t, state));
LiftCoeffModel = @(t, state) myAircraft.LiftCoeffModel(ModelsInputs(t, state));
PitchCoeffModel = @(t, state) myAircraft.PitchCoeffModel(ModelsInputs(t, state));

LiftModel = @(t, state) ...
    LiftCoeffModel(t, state) * ...
    0.5 * rho(state) * airspeed(state)^2 * S;

DragModel = @(t, state) ...
    DragCoeffModel(t, state) * ...
    0.5 * rho(state) * airspeed(state)^2 * S;

Pitch = @(t, state) ...
    PitchCoeffModel(t, state) * ...
    0.5 * rho(state) * airspeed(state)^2 * S * c;

Vdot = @(t, state) 1/m * (-DragModel(t, state) + ...
    ThrustModel(t, state) * cos(state(2)) - W * ...
    (cos(state(2)) * sin(elevation(state)) - ...
    sin(state(2)) * cos(elevation(state))));

alphadot = @(t, state) 1/(m*airspeed(state)) * (-LiftModel(t, state) - ...
    ThrustModel(t, state) * sin(state(2)) + W * ...
    (cos(state(2)) * cos(elevation(state)) + ...
    sin(state(2)) * sin(elevation(state)))) + state(3);

qdot = @(t, state) Pitch(t, state) / I_B(2, 2);

xEGdot = @(t, state) airspeed(state) * (cos(state(2)) * ...
    cos(elevation(state)) + sin(state(2)) * ...
    sin(elevation(state)));

zEGdot = @(t, state) airspeed(state) * (sin(state(2)) * ...
    cos(elevation(state)) - cos(state(2)) * ...
    sin(elevation(state)));

thetadot = @(t, state) state(3);

dstate_dt = @(t, state) [ Vdot(t, state); ...
                          alphadot(t, state); ...
                          qdot(t, state); ...
                          xEGdot(t, state); ...
                          zEGdot(t, state); ...
                          thetadot(t, state) ];

ODEoptions = odeset('AbsTol', 1e-9, 'RelTol', 1e-9);

[time, state] = ode45(dstate_dt, [0, t_end], state0, ODEoptions);

delta_T = delta_T_law(time);         delta_T = delta_T(:);
delta_e_deg = delta_e_deg_law(time); delta_e_deg = delta_e_deg(:);
delta_s_deg = delta_s_deg_law(time); delta_s_deg = delta_s_deg(:);
V = state(:, 1);
alpha = state(:, 2);
q = state(:, 3);
x_EG = state(:, 4);
z_EG = state(:, 5);
theta = state(:, 6);

end