close all; clear; clc

myAircraft = load('f18harv.mat');

ModelsInputs = zeros(1, 11);
delta_e_deg_cases = -20 : 5 : 10;

liftCharacteristicsPlot(myAircraft, ModelsInputs, [-5, 40], ...
                delta_e_deg_cases, 'ex3dofliftcharacteristics.pdf')

staticPolarPlot(myAircraft, ModelsInputs, [-5, 40], ...
                delta_e_deg_cases, 'ex3dofdragcharacteristics.pdf')

q_degps_cases = linspace(-10, 15, 6);
pitchCharacteristicsPlot(myAircraft, ModelsInputs, [-5, 40], ...
                     delta_e_deg_cases, q_degps_cases, ...
                     'ex3dofpitchcharacteristics.pdf')

t_end = 20;

x_EG0 = 0;
z_EG0 = -8000;

elevation0 = convang(6.1825, 'deg', 'rad');

alpha0 = convang(6.1825, 'deg', 'rad');
Mach0 = 0.3895;
[temp0, sound0, press0, dens0] = atmosisa(-z_EG0);
V0 = Mach0 * sound0;

q0 = 0;

state0 = [V0, alpha0, q0, x_EG0, z_EG0, elevation0].';

delta_T0 = 0.4686;
delta_T_law = @(t) interp1([0, 3, 8, 12, t_end], ...
                           [delta_T0, 0.65, 0.65, 0.75, 0.85], ...
                            t, 'pchip');

delta_e0_deg = -10.9958;
delta_e_deg_law = @(t) interp1( ...
                [0, 3, 8, 12, 16, t_end], ...
                [delta_e0_deg,   -13, -14, -15, -15.5, -15.5], ...
                 t, 'pchip');

delta_s0_deg = 0;
delta_s_deg_law = @(t) interp1([0, 1] * t_end, ...
                               [1, 1] * delta_s0_deg, ...
                                t, 'linear');

[time, ...
 delta_T, delta_e_deg, delta_s_deg, ...
 V, alpha, q, x_EG, z_EG, elevation] = ThreeDoFQuatVab(t_end, state0, ...
                                                       myAircraft, ...
                                                       delta_T_law, ...
                                                       delta_e_deg_law, ...
                                                       delta_s_deg_law);

Nt = length(time);

stackedPlot2(time, ...
             delta_T, delta_e_deg, ...
             {"Simulation time (s)", ...
              "$\delta_\mathrm{T}$", "$\delta_\mathrm{e}$ (deg)"}, ...
             {}, {}, 'ex3dofinputcommands.pdf')

alpha_deg = convang(alpha, 'rad', 'deg');
stackedPlot2(time, ...
             V, alpha_deg, ...
             {"Simulation time (s)", ...
              "Airspeed (m/s)", "$\alpha_\mathrm{B}$ (deg)"}, ...
             {}, {}, 'ex3dofairspeedAoA.pdf')

q_degps = convangvel(q, 'rad/s', 'deg/s');
multiPlot(time, ...
          "Simulation time (s)", "$q$ (deg/s)", ...
          {}, ...
          'ex3dofqdegps.pdf', ...
          q_degps)

stackedPlot2(time, ...
             x_EG, -z_EG, ...
             {"Simulation time (s)", ...
              "$x_{\mathrm{E},G}$ (m)", "Altitude (m)"}, ...
             {}, {}, 'ex3dofcogxz.pdf')

elevation_deg = convang(elevation, 'rad', 'deg');
multiPlot(time, ...
          "Simulation time (s)", "$\theta$ (deg)", ...
          {}, ...
          'ex3dofelevation.pdf', ...
          elevation_deg)

O = zeros(Nt, 1);
ModelsInputs = [alpha_deg, O, ...
                delta_T, delta_e_deg, delta_s_deg, O, O, ...
                O, q_degps, O, ...
                -z_EG, V];
CL = zeros(Nt, 1);
CD = CL;
CPitch = CL;
for it = 1 : Nt
    CL(it) = myAircraft.LiftCoeffModel(ModelsInputs(it, :));
    CD(it) = myAircraft.DragCoeffModel(ModelsInputs(it, :));
    CPitch(it) = myAircraft.PitchCoeffModel(ModelsInputs(it, :));
end
stackedPlot3(time, ...
             CL, CD, CPitch, ...
             {"Simulation time (s)", ...
              "$C_L$", "$C_D$", "$C_\mathcal{M}$"}, ...
             {}, {}, 'ex3dofaerocoeffhistories.pdf')

u = V .* cos(alpha);
v = O;
w = V .* sin(alpha);
quat = angle2quat(O, elevation, O);
quat0 = quat(:, 1);
quatx = quat(:, 2);
quaty = quat(:, 3);
quatz = quat(:, 4);
[f_xA, f_yA, f_zA] = LoadFactor(time, u, v, w, alpha_deg, quat0, quatx, quaty, quatz);
multiPlot(time, ...
          "Simulation time (s)", "$f_{z_\mathrm{A}}$", ...
          {}, ...
          'ex3dofloadfactor.pdf', ...
          f_zA)

trajectoryView(time, ...
               x_EG, O, z_EG, ...
               O, elevation, O, ...
               70, 8, ...
               'ex3doftrajectory.pdf')

dens = zeros(Nt, 1);
for it = 1 : Nt
    [~, ~, ~, dens(it)] = atmosisa(-z_EG(it));
end
lift = 1e-3 * CL .* 0.5 .* dens .* V.^2 .* myAircraft.S;
drag = 1e-3 * CD .* 0.5 .* dens .* V.^2 .* myAircraft.S;
stackedPlot2(time, ...
             lift, drag, ...
             {"Simulation time (s)", ...
              "Lift (kN)", "Drag (kN)"}, ...
             {}, {}, 'ex3dofliftdrag.pdf')