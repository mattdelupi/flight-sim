function [time, ...
          delta_T, delta_e_deg, delta_s_deg, delta_a_deg, delta_r_deg, ...
          u, v, w, p, q, r, ...
          x_EG, y_EG, z_EG, quat0, quatx, quaty, quatz] = ...
                          SixDoFQuat(t_end, state0, ...
                                     myAircraft, ...
                                     delta_T_law, ...
                                     delta_e_deg_law, delta_s_deg_law, ...
                                     delta_a_deg_law, delta_r_deg_law)

    S = myAircraft.S;
    b = myAircraft.b;
    c = myAircraft.c;
    m = myAircraft.m;
    W = myAircraft.W;
    I_B = myAircraft.I_B;

    O_3x3 = zeros(3);
    O_4x4 = zeros(4);
    O_4x3 = zeros(4, 3);
    O_3x4 = zeros(3, 4);
    O_7x1 = zeros(7, 1);

    omega_B_tilde = @(state) [   0,     -state(6),  state(5); ...
                              state(6),     0,     -state(4); ...
                             -state(5),  state(4),     0    ];

    T_EB = @(state) ...
                quat2dcm([state(10), state(11), state(12), state(13)]).';

    Quat_evol = @(state) 0.5 * [-state(11), -state(12), -state(13); ...
                                 state(10), -state(13),  state(12); ...
                                 state(13),  state(10), -state(11); ...
                                -state(12),  state(11),  state(10)];

    function rho = density(h)
        [~, ~, ~, rho] = atmosisa(h);
    end
    rho = @(state) density(-state(9));

    airspeed = @(state) sqrt(state(1)^2 + state(2)^2 + state(3)^2);
    alpha_deg = @(state) atand(state(3) / state(1));
    beta_deg = @(state) asind(state(2) / airspeed(state));
    p_degps = @(state) convangvel(state(4), 'rad/s', 'deg/s');
    q_degps = @(state) convangvel(state(5), 'rad/s', 'deg/s');
    r_degps = @(state) convangvel(state(6), 'rad/s', 'deg/s');
    altitude = @(state) -state(9);

    quaternion = @(state) [state(10), state(11), state(12), state(13)];

    function psi = quat2psi(quat)
        [psi, ~, ~] = quat2angle(quat);
    end
    psi = @(state) quat2psi(quaternion(state));
    
    function theta = quat2theta(quat)
        [~, theta, ~] = quat2angle(quat);
    end
    theta = @(state) quat2theta(quaternion(state));
    
    function phi = quat2phi(quat)
        [~, ~, phi] = quat2angle(quat);
    end
    phi = @(state) quat2phi(quaternion(state));

    InputCommands = @(t) ...
        [delta_T_law(t), ...
        delta_e_deg_law(t), delta_s_deg_law(t), ...
        delta_a_deg_law(t), delta_r_deg_law(t)];

    ModelsInputs = @(t, state) ...
        [alpha_deg(state), beta_deg(state), ...
         InputCommands(t), ...
         p_degps(state), q_degps(state), r_degps(state), ...
         altitude(state), airspeed(state)];

    ThrustModel = @(t, state) myAircraft.ThrustModel(ModelsInputs(t, state));
    DragCoeffModel = @(t, state) myAircraft.DragCoeffModel(ModelsInputs(t, state));
    LiftCoeffModel = @(t, state) myAircraft.LiftCoeffModel(ModelsInputs(t, state));
    CrossforceCoeffModel = @(t, state) myAircraft.CrossforceCoeffModel(ModelsInputs(t, state));
    RollCoeffModel = @(t, state) myAircraft.RollCoeffModel(ModelsInputs(t, state));
    PitchCoeffModel = @(t, state) myAircraft.PitchCoeffModel(ModelsInputs(t, state));
    YawCoeffModel = @(t, state) myAircraft.YawCoeffModel(ModelsInputs(t, state));

    LiftModel = @(t, state) ...
        LiftCoeffModel(t, state) * ...
        0.5 * rho(state) * airspeed(state)^2 * S;
    
    DragModel = @(t, state) ...
        DragCoeffModel(t, state) * ...
        0.5 * rho(state) * airspeed(state)^2 * S;
    
    CrossforceModel = @(t, state) ...
        CrossforceCoeffModel(t, state) * ...
        0.5 * rho(state) * airspeed(state)^2 * S;

    X = @(t, state) ...
        ThrustModel(t, state) - ...
        DragModel(t, state) * cosd(alpha_deg(state)) + ...
        LiftModel(t, state) * sind(alpha_deg(state)) - ...
        W * sin(theta(state));
    
    Y = @(t, state) ...
        CrossforceModel(t, state) + ...
        W * sin(phi(state)) * cos(theta(state));
    
    Z = @(t, state) ...
       -DragModel(t, state) * sind(alpha_deg(state)) - ...
        LiftModel(t, state) * cosd(alpha_deg(state)) + ...
        W * cos(phi(state)) * cos(theta(state));

    Roll = @(t, state) ...
        RollCoeffModel(t, state) * ...
        0.5 * rho(state) * airspeed(state)^2 * S * b;
    
    Pitch = @(t, state) ...
        PitchCoeffModel(t, state) * ...
        0.5 * rho(state) * airspeed(state)^2 * S * c;
    
    Yaw = @(t, state) ...
        YawCoeffModel(t, state) * ...
        0.5 * rho(state) * airspeed(state)^2 * S * b;

    dstate_dt = @(t, state) ...
        [-omega_B_tilde(state),           O_3x3,              O_3x3, O_3x4; ...
                O_3x3,         -I_B\omega_B_tilde(state)*I_B, O_3x3, O_3x4; ...
             T_EB(state),                 O_3x3,              O_3x3, O_3x4; ...
                O_4x3,               Quat_evol(state),        O_4x3, O_4x4] * ...
          state + ...
        [ 1/m * [ X(t, state); ...
                  Y(t, state); ...
                  Z(t, state) ]; ...
          I_B \ [ Roll(t, state); ...
                  Pitch(t, state); ...
                  Yaw(t, state) ]; ...
          O_7x1 ];
    
    ODEoptions = odeset('AbsTol', 1e-9, 'RelTol', 1e-9);

    [time, state] = ode45(dstate_dt, [0, t_end], state0, ODEoptions);

    delta_T = delta_T_law(time);         delta_T = delta_T(:);
    delta_e_deg = delta_e_deg_law(time); delta_e_deg = delta_e_deg(:);
    delta_s_deg = delta_s_deg_law(time); delta_s_deg = delta_s_deg(:);
    delta_a_deg = delta_a_deg_law(time); delta_a_deg = delta_a_deg(:);
    delta_r_deg = delta_r_deg_law(time); delta_r_deg = delta_r_deg(:);
    u = state(:, 1);
    v = state(:, 2);
    w = state(:, 3);
    p = state(:, 4);
    q = state(:, 5);
    r = state(:, 6);
    x_EG = state(:, 7);
    y_EG = state(:, 8);
    z_EG = state(:, 9);
    quat0 = state(:, 10);
    quatx = state(:, 11);
    quaty = state(:, 12);
    quatz = state(:, 13);

end